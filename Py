# KNN
import numpy as np
import pandas as pd 
from sklearn.model_selection import train_test_split,ShuffleSplit, GridSearchCV,cross_val_score
from sklearn.metrics import mean_squared_error, r2_score
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import scale
from sklearn.preprocessing import StandardScaler
from sklearn import model_selection
from sklearn.neighbors import KNeighborsRegressor
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score
%matplotlib inline
from matplotlib import rcParams
from matplotlib.cm import rainbow

import warnings
warnings.simplefilter('ignore')
from warnings import filterwarnings
## Regresyon
Hitters Verisi
hit = pd.read_csv("Hitters.csv")

print("Bu veri setinde {} satır ve {} sütun vardır".format(hit.shape[0], hit.shape[1]))
hit.head()
plt.figure(figsize= (18,18))
sns.heatmap(hit.corr(),center=0, annot = True)
hit.info()
hit.describe().transpose()
## Model
df = hit.copy()
df = df.dropna()
dms = pd.get_dummies(df[['League', 'Division', 'NewLeague']])
y = df["Salary"]
X_ = df.drop(['Salary', 'League', 'Division', 'NewLeague'], axis=1).astype('float64')
X = pd.concat([X_, dms[['League_N', 'Division_W', 'NewLeague_N']]], axis=1)
X_train, X_test, y_train, y_test = train_test_split(X, y, 
                                                    test_size=0.25, 
                                                    random_state=42)
print(X_train.shape,'\t train verisinin bağımsız değişkenlerinin boyutu')
print(y_train.shape,'\t train verisinin bağımlı değişkeninin boyutu')
print(X_test.shape,'\t test verisinin bağımsız değişkenlerinin boyutu')
print(y_test.shape,'\t train verisinin bağımlı değişkeninin boyutu')
knn_model = KNeighborsRegressor().fit(X_train, y_train)
print(knn_model.get_params())
knn_model.n_neighbors
knn_model.effective_metric_
### Tahmin
y_pred = knn_model.predict(X_test)
print("Test Hatası")
np.sqrt(mean_squared_error(y_test, y_pred)).round(4)
print("Farklı k değerlerinin eğitim seti üzerinde ortaya çıkan hata gözlemlemesi")
RMSE = [] 

for k in range(10):
    k = k+1
    knn_model = KNeighborsRegressor(n_neighbors = k).fit(X_train, y_train)
    y_pred = knn_model.predict(X_train) 
    rmse = np.sqrt(mean_squared_error(y_train,y_pred)).round(4) 
    RMSE.append(rmse) 
    print("k =" , k , "için RMSE değeri: ", rmse)

### Model Tuning
Cross Validation veya Çapraz Doğrulama yöntemiyle optimum k hiperparametric sayısını belirleme
from sklearn.model_selection import GridSearchCV
knn_params = {'n_neighbors': np.arange(1,30,1)}
knn = KNeighborsRegressor()
knn_cv_model = GridSearchCV(knn, knn_params, cv = 10)
knn_cv_model.fit(X_train, y_train).get_params()
knn_cv_model.best_params_["n_neighbors"]
RMSE = [] 
RMSE_CV = []
for k in range(10):
    k = k+1
    knn_model = KNeighborsRegressor(n_neighbors = k).fit(X_train, y_train)
    y_pred = knn_model.predict(X_train) 
    rmse = np.sqrt(mean_squared_error(y_train,y_pred)) 
    rmse_cv = np.sqrt(-1*cross_val_score(knn_model, X_train, y_train, cv=10, 
                                         scoring = "neg_mean_squared_error").mean())
    RMSE.append(rmse) 
    RMSE_CV.append(rmse_cv)
    print("k =" , k , "için RMSE değeri: ", rmse, "RMSE_CV değeri: ", rmse_cv )

knn_tuned = KNeighborsRegressor(n_neighbors = knn_cv_model.best_params_["n_neighbors"])
knn_tuned.fit(X_train, y_train).get_params()

y_pred = knn_tuned.predict(X_test)
print("Tuned edilmiş Test Hatası")
np.sqrt(mean_squared_error(y_test, y_pred))
## Sınıflandırma
Diabetes verisi
diabetes = pd.read_csv("diabetes.csv")

print("Bu veri setinde {} satır ve {} sütun vardır".format(diabetes.shape[0], diabetes.shape[1]))
diabetes.head()
plt.figure(figsize= (18,18))
sns.heatmap(diabetes.corr(),center=0, annot = True)
plt.title('Korelasyon Matrisi')
plt.show()
diabetes.info()
diabetes.describe().transpose()
diabetes.groupby("Outcome").mean()
diabetes.groupby("Outcome").std()
sns.countplot(diabetes["Outcome"])
cols = ['Pregnancies','Glucose','BloodPressure','SkinThickness','Insulin','BMI','DiabetesPedigreeFunction','Age','Outcome']
sns.pairplot(data = diabetes[cols], hue = 'Outcome', palette = 'RdBu')
### Model
df = diabetes.copy()
df = df.dropna()
y = df["Outcome"]
X = df.drop(['Outcome'], axis=1)
X_train, X_test, y_train, y_test = train_test_split(X, y, 
                                                    test_size=0.30, 
                                                    random_state=42)
print(X_train.shape,'\t train verisinin bağımsız değişkenlerinin boyutu')
print(y_train.shape,'\t train verisinin bağımlı değişkeninin boyutu')
print(X_test.shape,'\t test verisinin bağımsız değişkenlerinin boyutu')
print(y_test.shape,'\t train verisinin bağımlı değişkeninin boyutu')
knn = KNeighborsClassifier()
knn_model = knn.fit(X_train, y_train)
knn_model.get_params()
### Tahmin
y_pred = knn_model.predict(X_test)
from sklearn.metrics import accuracy_score
print("KNN kullanılarak Diabetes veri setinin Accuracy skoru=", accuracy_score(y_test, y_pred).round(4))
print(cross_val_score(knn_model, X, y, cv = 10, scoring='accuracy').round(3))
print(cross_val_score(knn_model, X, y, cv = 10, scoring='accuracy').mean().round(3))
from sklearn.metrics import classification_report
print(classification_report(y_test, y_pred))
from sklearn.metrics import confusion_matrix
conf_ = confusion_matrix(y_test, y_pred)
sns.heatmap(conf_.T, square = True, annot = True, fmt = 'd', cbar = False)
plt.title('Confusion Matrix')
plt.xlabel("Doğru Sınıf")
plt.ylabel("Tahmin Sınıfı")
plt.show()
### Model Tuning
knn_params = {"n_neighbors": np.arange(1,50)}
knn = KNeighborsClassifier()
knn_cv = GridSearchCV(knn, knn_params, cv=10)
knn_cv.fit(X_train, y_train)
print("En iyi skor:" + str(knn_cv.best_score_.round(4)))
print("En iyi parametreler: " + str(knn_cv.best_params_))

neighbors = []
cv_scores = []
for k in range(1,50):
    neighbors.append(k)
    knn = KNeighborsClassifier(n_neighbors = k)
    scores = cross_val_score(
        knn, X_train, y_train, cv = 10, scoring = 'accuracy')
    cv_scores.append(scores.mean().round(3))
    
print(cv_scores)

MIS_E = [1 - x for x in cv_scores]
optimal_k = neighbors[MIS_E.index(min(MIS_E))]
print('Optimal K komşu sayısı = ' ,optimal_k)

plt.figure(figsize = (15,6))
plt.plot(neighbors, MIS_E)
plt.xlabel('K komşu sayısı')
plt.ylabel('Yanlış Sınıflandırma Hatası')
plt.show()
knn = KNeighborsClassifier(11)
knn_tuned = knn.fit(X_train, y_train)
knn_tuned.score(X_test, y_test).round(4)
y_pred = knn_tuned.predict(X_test)
print("KNN kullanılarak Diabetes veri setinde tuned modelinin Accuracy skoru=", accuracy_score(y_test, y_pred).round(4))
print(classification_report(y_test, y_pred))
from sklearn.metrics import confusion_matrix
conf_ = confusion_matrix(y_test, y_pred)
sns.heatmap(conf_.T, square = True, annot = True, fmt = 'd', cbar = False)
plt.title('Confusion Matrix')
plt.xlabel("Doğru Sınıf")
plt.ylabel("Tahmin Sınıfı")
plt.show()
